#!/bin/bash

set -euo pipefail

export AUDIT_ROLE=AssumableSecurityAuditRole
export ASSUME_DURATION=""
export ASSUME_MFA=""
export PARALLEL=""
export REPORTS=reports
export PROWLER_REPORTS=$REPORTS/prowler
export SCOUT_REPORTS=$REPORTS/scout
FULL_DURATION=0
SECONDS=0

while getopts "r:pmd:" opt; do
    case "$opt" in
        r) AUDIT_ROLE="$OPTARG" ;;
        p) PARALLEL='TRUE' ;;
        d) ASSUME_DURATION="-d $OPTARG" ;;
        m) ASSUME_MFA="-m" ;;
    esac
done
shift $(($OPTIND-1))

export MAIN_ACCOUNT=$(aws sts get-caller-identity --query Account --output text | tr -d '\r')

if [[ "$#" -gt "0" ]]
then
  ACCOUNTS=$@
  echo Auditing Accounts: $@
  echo ""
else

  if aws organizations list-accounts > /dev/null
  then
    echo Auditing all Accounts in the Organization
    ACCOUNTS=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE'].[Id]" --output text | tr -d '\r')
  else
    echo Account is not part of an Organization, auditing $MAIN_ACCOUNT
    ACCOUNTS=$MAIN_ACCOUNT
  fi
  echo ""
fi

mkdir -p reports/scout reports/prowler

function audit_aws_account(){
  #  set -euxo pipefail

  SECONDS=0
  account=$1
  echo "----Auditing Account $account--------------------------------------------------"
  if [[ "$MAIN_ACCOUNT" == "$account" ]]
  then
    echo Account is the Main Account
    CREDENTIALS=""
  else
    echo Account is a SubAccount
    if [[ ! -z "$ASSUME_MFA" ]]
    then
      echo "MFA TOKEN:"
    fi
    OUTPUT_STORE=$(awsinfo assume role -r $AUDIT_ROLE $ASSUME_DURATION $ASSUME_MFA -a $account)
    return_value=$?
    if [ $return_value -ne 0 ]
    then
      echo "Could not assume role in Subaccount $account"
      exit 1
    else
      CREDENTIALS=$(echo "$OUTPUT_STORE" | tail -n1)
    fi
  fi

  PROWLER_LOG_OUTPUT=$PROWLER_REPORTS/$account.log
  SCOUT_LOG_OUTPUT=$SCOUT_REPORTS/$account.log

  echo "Current Account:"
  $CREDENTIALS && awsinfo me

  echo "Starting Prowler Audit and logging to $PROWLER_LOG_OUTPUT"
  $CREDENTIALS && prowler &> $PROWLER_LOG_OUTPUT || true
  cat $PROWLER_LOG_OUTPUT | ansi2html -l | sed 's/body class=\"body_foreground body_background\"/body/g' > $PROWLER_REPORTS/$account.html

  echo "Starting Scout Audit and logging to $SCOUT_LOG_OUTPUT"
  $CREDENTIALS && scout aws --report-dir $SCOUT_REPORTS --no-browser --force &> $SCOUT_LOG_OUTPUT || true

  SINGLE_AUDIT_DURATION=$SECONDS
  FULL_DURATION=$((FULL_DURATION + SINGLE_AUDIT_DURATION))
  printf "Finished Audit for Account $account in %02d:%02d:%02d" $((SINGLE_AUDIT_DURATION / 3600)) $(( (SINGLE_AUDIT_DURATION % 3600) / 60 )) $((SINGLE_AUDIT_DURATION % 60))
  echo -e "\n"
}

export -f audit_aws_account

if [[ -z "$PARALLEL" ]]
then
  for account in $ACCOUNTS
  do
    bash -c "audit_aws_account $account"
  done
    SINGLE_AUDIT_DURATION=$SECONDS
    FULL_DURATION=$((FULL_DURATION + SINGLE_AUDIT_DURATION))
    echo "-----------------------------------------------------------------------------------"
    echo "Audit Logs and Reports can be found in ./reports"
    printf "Audit took %02d:%02d:%02d" $((FULL_DURATION / 3600)) $(( (FULL_DURATION % 3600) / 60 )) $((FULL_DURATION % 60))
    echo -e "\n-----------------------------------------------------------------------------------"
else
  echo -e "Auditing progress for each account logged in $REPORTS/ACCOUNT_ID.log\n"
  echo "$ACCOUNTS" | xargs -P 4 -n 1 -I {} bash -c "echo Starting Audit for {} && audit_aws_account {} &> $REPORTS/{}.log"
  echo "-----------------------------------------------------------------------------------"
  echo "Audit Logs and Reports can be found in ./reports"
  FULL_DURATION=$SECONDS
  printf "Audit took %02d:%02d:%02d" $((FULL_DURATION / 3600)) $(( (FULL_DURATION % 3600) / 60 )) $((FULL_DURATION % 60))
  echo -e "\n-----------------------------------------------------------------------------------"
fi

